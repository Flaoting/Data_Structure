#include <iostream>
#include <fstream>
using namespace std;
int r,y,g;
int n;
int k[200],t[200];
int main()
{
    fstream infile("1.txt",ios::in);
    infile>>r>>y>>g;
    infile>>n;
    for (int i = 1; i <= n; i ++)
        infile>>k[i]>>t[i];
    int ans=0,temp=0;
    int all = r+y+g;
    
    for (int i = 1; i <= n; i ++)
    {
    
        if (k[i] == 0)
        {
            ans+=t[i];
            continue;
        }
        if (ans>t[i])
        {
            temp = ans - t[i];
            temp %= all;
        }
        else
        {
            if (k[i] == 1)
            {
                ans += (t[i] - ans);
            }
            else if (k[i] == 2)
            {
                ans += r+(t[i]-ans);
            }
            continue; //绿灯不加
        }
        if (k[i]==1)
        {

            if (temp>g&&temp<g+y) ans += (all-temp);
            else if (temp>g+y) ans+=(all-temp);
        }
        else if (k[i] == 2)
        {
            if (temp>r+g) ans+=(all-temp+r);
            else if (temp<r) ans+=(r-temp);
        }
        else if (k[i]==3)
        {
            if (temp < y+r) ans+=(r+y-temp);
        }
    
    }
    cout <<ans;
    return 0;
}

/*
4. CSP 题目 
问题描述：一次放学的时候，小明已经规划好了自己回家的路线，并且能够预测经过各个路段的时间。
同时，小明通过学校里安装的“智慧光明”终端，看到了出发时刻路上经过的所有红绿灯的指示状态。请帮忙计算小明此次回家所需要的时间。
输入格式：
　　输入的第一行包含空格分隔的三个正整数 r、y、g，表示红绿灯的设置。这三个数均不超过 106。
　　输入的第二行包含一个正整数 n，表示小明总共经过的道路段数和路过的红绿灯数目。
　　接下来的 n 行，每行包含空格分隔的两个整数 k、t。k=0 表示经过了一段道路，将会耗时 t 秒，此处 t 不超过 106；k=1、2、3 时，
分别表示出发时刻，此处的红绿灯状态是红灯、黄灯、绿灯，且倒计时显示牌上显示的数字是 t，此处 t 分别不会超过 r、y、g。
输出格式：
　　输出一个数字，表示此次小明放学回家所用的时间。
样例输入：
30 3 30
8
0 10
1 5
0 11
2 2
0 6
0 3
3 10
0 3
样例输出：
46
样例说明：
　　小明先经过第一段路，用时10秒。第一盏红绿灯出发时是红灯，还剩5秒；小明到达路口时，
这个红绿灯已经变为绿灯，不用等待直接通过。接下来经过第二段路，用时11秒。第二盏红绿灯出发时是黄灯，
还剩两秒；小明到达路口时，这个红绿灯已经变为红灯，还剩11秒。接下来经过第三、第四段路，用时9秒。
第三盏红绿灯出发时是绿灯，还剩10秒；小明到达路口时，这个红绿灯已经变为红灯，还剩两秒。接下来经过最后一段路，用时3秒。共计10+11+11+9+2+3=46秒。
评测用例规模与约定：
　　有些测试点具有特殊的性质：
　　* 前2个测试点中不存在任何信号灯。
　　测试点的输入数据规模：
　　* 前6个测试点保证n≤103。
　　* 所有测试点保证n≤105。

顺序是 绿黄红
*/